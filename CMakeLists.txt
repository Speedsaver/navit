set(MACOSX_BUNDLE_GUI_IDENTIFIER "org.navitproject.navit")
set(MACOSX_BUNDLE_BUNDLE_NAME "Navit")
message(STATUS "Building with CMake V${CMAKE_VERSION}")
project(navit C)

# Workaround for CMake issue 8345 / 9220, see http://trac.navit-project.org/ticket/1041
if(DEFINED CMAKE_CXX_COMPILER AND CMAKE_CXX_COMPILER MATCHES "^$")
  set(CMAKE_CXX_COMPILER CMAKE_CXX_COMPILER-NOTFOUND)
endif(DEFINED CMAKE_CXX_COMPILER AND CMAKE_CXX_COMPILER MATCHES "^$")
if (NOT DISABLE_CXX)
  enable_language(CXX OPTIONAL)
endif(NOT DISABLE_CXX)

cmake_minimum_required(VERSION 2.6 FATAL_ERROR)
set(NAVIT_VERSION_MAJOR "0")
set(NAVIT_VERSION_MINOR "5")
set(NAVIT_VERSION_PATCH "1")
set(PACKAGE_VERSION "${NAVIT_VERSION_MAJOR}.${NAVIT_VERSION_MINOR}.${NAVIT_VERSION_PATCH}")

set(PACKAGE_NAME "navit-git")
set(PACKAGE "navit" CACHE STRING "Navit package name")
set(PACKAGE_STRING "${PACKAGE} ${PACKAGE_VERSION}")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
include("${PROJECT_SOURCE_DIR}/cmake/navit_macros.cmake")

IF(NOT CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

# binary name
set(NAVIT_BINARY navit CACHE STRING "Navit binary name")
# install path
set(BIN_DIR bin CACHE PATH "Navit bin path")
add_definitions ("-DBIN_DIR=\"${BIN_DIR}\"")
set(SHARE_DIR share/navit CACHE PATH "Navit share path")
add_definitions ("-DSHARE_DIR=\"${SHARE_DIR}\"")
set(LOCALE_DIR share/locale CACHE PATH "Navit locale path")
add_definitions ("-DLOCALE_DIR=\"${LOCALE_DIR}\"")
set(IMAGE_DIR share/navit/icons CACHE PATH "Navit image path")
add_definitions ("-DIMAGE_DIR=\"${IMAGE_DIR}\"")
set(MAN_DIR share/man/man1 CACHE PATH "Navit man path")
add_definitions ("-DMAN_DIR=\"${MAN_DIR}\"")
# LIB_DIR
IF (NOT LIBDIR)
    MESSAGE(STATUS "LIBDIR variable is not defined. It will be autodetected now.")
    MESSAGE(STATUS "You can set it manually with -DLIBDIR=<value>")
    # check 64 bit
    IF (CMAKE_SIZEOF_VOID_P EQUAL 4)
    	SET(LIB_DIR lib/navit CACHE PATH "Navit 32bit bin path")
        MESSAGE(STATUS "   LIB_DIR (highest subdirectory if LIBDIR) is set to '${LIB_DIR}'")
    ELSE (CMAKE_SIZEOF_VOID_P EQUAL 4)
    	SET(LIB_DIR lib64/navit CACHE PATH "Navit 64bit bin path")
        MESSAGE(STATUS "   LIB_DIR (highest subdirectory if LIBDIR) is set to '${LIB_DIR}'")
    ENDIF (CMAKE_SIZEOF_VOID_P EQUAL 4)
ELSE (NOT LIBDIR)
    GET_FILENAME_COMPONENT (LIB_DIR ${LIBDIR} NAME)
    MESSAGE(STATUS "   LIB_DIR (highest subdirectory if LIBDIR) is set to '${LIB_DIR}'")
ENDIF (NOT LIBDIR)
foreach(EXTRA_MODULE ${EXTRA_MODULES})
   add_module(${EXTRA_MODULE} "extra module specified" TRUE)
endforeach()
add_definitions ("-DLIB_DIR=\"${LIB_DIR}\"")

if (EXTRA_LIBS)
	list(APPEND NAVIT_LIBS ${EXTRA_LIBS})
endif(EXTRA_LIBS)

if (EXTRA_INCLUDES)
    include_directories(${EXTRA_INCLUDES})
endif(EXTRA_INCLUDES)

if (EXTRA_LIBDIR)
    link_directories(${EXTRA_LIBDIR})
endif(EXTRA_LIBDIR)

### Detect environment

add_plugin(support/ezxml "native Glib found" FALSE)
add_plugin(support/glib "native Glib found" FALSE)
add_plugin(support/zlib "native zlib found" FALSE)
add_plugin(support/libpng "native libpng found" FALSE)
add_plugin(support/wordexp "native wordexp found" FALSE)
add_module(font/freetype "freetype not found" FALSE)
add_module(graphics/gd "FreeType library not found" FALSE)
add_module(graphics/gtk_drawing_area "FreeType library not found" FALSE)
add_module(graphics/opengl "FreeType library not found" FALSE)
add_module(graphics/sdl "Required library not found" FALSE)
add_module(graphics/egl "Required library not found" FALSE)
add_module(graphics/ssd1306 "Required library not found" TRUE)
add_module(graphics/qt_qpainter "Qt libraries not found" FALSE)
add_module(graphics/qt5 "Qt5 libraries not found" FALSE)
add_module(gui/qml "Qt Declarative not found" FALSE)
add_module(gui/qt5_qml "Qt5 Declarative not found" FALSE)
add_module(gui/gtk "GTK libs not found" FALSE)
add_module(gui/speedsaver "Default" TRUE)
add_module(vehicle/gpsd "gpsd lib not found" FALSE)
add_module(vehicle/gypsy "gypsy lib not found" FALSE)
add_module(binding/dbus "dbus-glib-1 not found" FALSE)
add_module(binding/python "python libraries not found" FALSE)
add_module(vehicle/gpsd_dbus "dbus-glib-1 not found" FALSE)
add_module(vehicle/qt5 "Qt5 libraries not found" FALSE)
add_module(map/garmin "Garmin library not found" FALSE)
set(CPACK_PROJECT_CONFIG_FILE "${CMAKE_SOURCE_DIR}/cpack.cmake")
set(CPACK_PACKAGE_VENDOR "Navit team")
set(CPACK_PACKAGE_VERSION_MAJOR ${NAVIT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${NAVIT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH "${NAVIT_VERSION_PATCH}")
set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.md")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/GPL-2")
set(CPACK_PACKAGE_FILE_NAME ${PACKAGE})
set(CPACK_PACKAGE_EXECUTABLES "navit;Navit")
INCLUDE (CPack)

INCLUDE (CheckIncludeFiles)
INCLUDE (CheckLibraryExists)
INCLUDE (CheckFunctionExists)
INCLUDE (CheckSymbolExists)
find_package(Glib)
find_package(Gmodule)
find_package(ZLIB)
find_package(Freetype)
find_library(SDL2MAIN SDL2)
find_library(SDL2IMAGE SDL2_image)
find_library(GLES2 GLESv2)
find_package(SDL)
find_package(SDL_ttf)
find_package(SDL_image)
find_package(OpenGL)
find_package(GLUT)
find_package(GTK2 2.6 COMPONENTS gtk)
find_package(PNG)
find_package(DBusGLib)
find_package(PythonLibs)
find_package(OpenSSL)
find_package(Threads)
libfind_pkg_check_modules(FONTCONFIG fontconfig)
#Qt detection
if (NOT DISABLE_QT)
  find_package(Qt5Widgets)
  find_package(Qt5Quick)
  find_package(Qt5Positioning)
  if (Qt5Widgets_FOUND OR Qt5Quick_FOUND OR Qt5Sensors_FOUND)
    add_feature (USE_QWIDGET "Qt5 Qt5Widget not found" FALSE)
    add_feature (USE_QML "Qt5 Qt5Quick not found" FALSE)
    if (Qt5Widgets_FOUND OR Qt5Quick_FOUND)
      find_package(Qt5Svg REQUIRED)
      find_package(Qt5DBus REQUIRED)
      find_package(Qt5Multimedia)
    endif (Qt5Widgets_FOUND OR Qt5Quick_FOUND)
    if (Qt5Positioning_FOUND)
      find_package(Qt5Sensors REQUIRED)
    endif (Qt5Positioning_FOUND)
  else (Qt5Widgets_FOUND OR Qt5Quick_FOUND OR Qt5Sensors_FOUND)
    # Unfortunately, CMake seems to ignore the "OPTIONAL_COMPONENTS" flag,
    # and actually requires all components to be installed. Maybe this can
    # be fixed later...
    find_package(Qt4 4.7 COMPONENTS QtCore OPTIONAL_COMPONENTS QtGui QtXml QtDeclarative QtSvg)
  endif (Qt5Widgets_FOUND OR Qt5Quick_FOUND OR Qt5Sensors_FOUND)      
endif (NOT DISABLE_QT)

#pkg-config based detection
find_package(PkgConfig)
if(PKG_CONFIG_FOUND)
   # Accept even old versions of libgps, because N810 uses an old version (see #1179).
   pkg_check_modules(LIBGPS libgps)
   pkg_check_modules(LIBGPS19 libgps>=2.90)
   # libgpsd<V3.1 is buggy if LC_ALL is set.
   pkg_check_modules(LIBGPS_NEW libgps>=3.1)
   pkg_check_modules(LIBGARMIN libgarmin)
   pkg_check_modules(IMLIB2 imlib2)
   if(IMLIB2_FOUND)
      set(HAVE_IMLIB2 1)
   endif(IMLIB2_FOUND)
endif(PKG_CONFIG_FOUND)
#Simple checks
CHECK_INCLUDE_FILES(wordexp.h HAVE_WORDEXP)
CHECK_INCLUDE_FILES(endian.h HAVE_ENDIAN_H)
CHECK_INCLUDE_FILES(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILES(byteswap.h HAVE_BYTESWAP_H)
CHECK_LIBRARY_EXISTS(gypsy gypsy_control_get_default "" GYPSY_FOUND)
CHECK_INCLUDE_FILES(sys/socket.h HAVE_SOCKET)
CHECK_INCLUDE_FILES(sys/shm.h HAVE_SHMEM)
CHECK_INCLUDE_FILES(sys/time.h HAVE_SYS_TIME_H)
CHECK_INCLUDE_FILES(getopt.h HAVE_GETOPT_H)
CHECK_SYMBOL_EXISTS(system stdlib.h HAVE_SYSTEM)
CHECK_FUNCTION_EXISTS(sbrk HAVE_SBRK)
CHECK_FUNCTION_EXISTS(fsync HAVE_FSYNC)

if (CMAKE_USE_PTHREADS_INIT)
   list(APPEND NAVIT_LIBS pthread)
endif(CMAKE_USE_PTHREADS_INIT)
if (Glib_FOUND)
   set(HAVE_GLIB 1)
   include_directories(${Glib_INCLUDE_DIRS})
   list(APPEND NAVIT_LIBS ${Glib_LIBRARIES})
else(Glib_FOUND)
   set_with_reason(support/glib "Glib not found" TRUE ${INTL_LIBS})
endif(Glib_FOUND)
if (Gmodule_FOUND)
   set(HAVE_GMODULE 1)
   include_directories(${Gmodule_INCLUDE_DIRS})
   list(APPEND NAVIT_LIBS ${Gmodule_LIBRARIES})
endif(Gmodule_FOUND)
if(ZLIB_FOUND)
   set(HAVE_ZLIB 1)
   include_directories(${ZLIB_INCLUDE_DIRS})
   list(APPEND NAVIT_LIBS ${ZLIB_LIBRARIES})
else(ZLIB_FOUND)
   message(STATUS "using internal zlib")
   set_with_reason(support/zlib "native zlib missing" TRUE)
endif(ZLIB_FOUND)
if(OPENSSL_CRYPTO_LIBRARIES)
   set(HAVE_LIBCRYPTO 1)
   include_directories(${OPENSSL_INCLUDE_DIR})
   list(APPEND NAVIT_LIBS ${OPENSSL_CRYPTO_LIBRARIES})
endif()
if(PNG_FOUND)
   set(HAVE_PNG 1)
   include_directories(${PNG_INCLUDE_DIR})
   list(APPEND NAVIT_LIBS ${PNG_LIBRARIES})
else(PNG_FOUND)
   message(STATUS "using internal libpng")
   set_with_reason(support/libpng "native libpng missing" TRUE)
endif(PNG_FOUND)
if (NOT HAVE_WORDEXP)
   message(STATUS "wordexp.h not found. use internal wordexp")
   set_with_reason(support/wordexp "native wordexp missing" TRUE)
endif()
if (NOT Glib_FOUND)
   set_with_reason(support/ezxml "Glib not found" TRUE)
endif()

if(FREETYPE_FOUND)
   pkg_check_modules(FRIBIDI fribidi)
   pkg_check_modules(FRIBIDI2 fribidi>=0.19.0)
   include_directories(${FREETYPE_INCLUDE_DIRS})
   set_with_reason(font/freetype "freetype found" TRUE "${FREETYPE_LIBRARY};${FONTCONFIG_LDFLAGS};${FRIBIDI_LIBRARIES}")
else(FREETYPE_FOUND)
   MESSAGE("No freetype library found, graphics modules may not be available")
   set_with_reason(graphics/gd "FreeType library not found" FALSE)
   set_with_reason(graphics/gtk_drawing_area "FreeType library not found" FALSE)
   set_with_reason(graphics/opengl "FreeType library not found" FALSE)
   set_with_reason(graphics/sdl "FreeType library not found" FALSE)
   set_with_reason(graphics/egl "FreeType library not found" FALSE)
endif(FREETYPE_FOUND)

if(FONTCONFIG_FOUND)
   set(HAVE_FONTCONFIG 1)
endif(FONTCONFIG_FOUND)

if (QT_FOUND)
   if (QT_QTCORE_FOUND AND QT_QTGUI_FOUND AND FREETYPE_FOUND)
      include(${QT_USE_FILE})
      set_with_reason(graphics/qt_qpainter "Qt libraries found" TRUE ${QT_LIBRARIES})

      if (QT_QTDECLARATIVE_FOUND AND QT_QTXML_FOUND)
         set_with_reason(gui/qml "Qt Declarative found" TRUE ${QT_LIBRARIES})
      endif()

      if (QT_QTSVG_FOUND)
         set(HAVE_QT_SVG 1)
      elseif( USE_SVG AND graphics/qt_qpainter)
         message( WARNING "QT compiled without SVG support")
      endif()
   endif()
endif(QT_FOUND)
if (Qt5Widgets_FOUND OR Qt5Quick_FOUND)
   set(Qt5_ADDITIONAL_LIBRARIES "")
   if(Qt5Widgets_FOUND)
	   set_with_reason(USE_QWIDGET "Qt5Widgets found" TRUE)
	   if(USE_QWIDGET)
	   	set(Qt5_ADDITIONAL_LIBRARIES ${Qt5_ADDITIONAL_LIBRARIES} ${Qt5Widgets_LIBRARIES})
           endif()
   endif()
   if(Qt5Quick_FOUND)
	   set_with_reason(USE_QML "Qt5Quick found" TRUE)
	   if(USE_QML)
	   	set(Qt5_ADDITIONAL_LIBRARIES ${Qt5_ADDITIONAL_LIBRARIES} ${Qt5Quick_LIBRARIES})
	   endif()
	   set_with_reason(gui/qt5_qml "Qt5 found" TRUE
		${Qt5Quick_LIBRARIES})

   endif()
   set_with_reason(graphics/qt5 "Qt5 found" TRUE
		${Qt5_ADDITIONAL_LIBRARIES}
		${Qt5Svg_LIBRARIES}
		${Qt5DBus_LIBRARIES})
endif ()
if (Qt5Positioning_FOUND)
   set_with_reason(vehicle/qt5 "Qt5 Positioning found" TRUE
		${Qt5Positioning_LIBRARIES}
		${Qt5Sensors_LIBRARIES}) 
endif ()
if(GTK2_FOUND)
   # Include gtk.h with "SYSTEM" to avoid GCC compiler warning for gtkitemfactory.h.
   include_directories(SYSTEM ${GTK2_GTK_INCLUDE_DIR})
   include_directories(${GTK2_INCLUDE_DIRS})
   set(HAVE_GTK2 1)
   set_with_reason(gui/gtk "GTK libs found" TRUE ${GTK2_LIBRARIES})
   if(FREETYPE_FOUND)
      set_with_reason(graphics/gtk_drawing_area "GTK libs found" TRUE ${GTK2_LIBRARIES})
   endif(FREETYPE_FOUND)
endif(GTK2_FOUND)

CHECK_LIBRARY_EXISTS(freeimage FreeImage_Load "" HAVE_FREEIMAGE)
if (USE_OPENGLES OR USE_OPENGLES2)
   CHECK_LIBRARY_EXISTS(EGL eglInitialize "" HAVE_EGL)
endif(USE_OPENGLES OR USE_OPENGLES2)
if (FREETYPE_FOUND)
   if (OPENGL_FOUND AND OPENGL_GLU_FOUND AND GLUT_FOUND AND OPENGL_INCLUDE_DIR)
      message (STATUS "opengl found: ${OPENGL_gl_LIBRARY}")
      include_directories(${OPENGL_INCLUDE_DIR})
      if (USE_OPENGLES2)
	 set(USE_OPENGLES TRUE)
	 set(GRAPHICS_OPENGL_LIBRARY GLESv2 EGL)
      elseif (USE_OPENGLES)
         set(GRAPHICS_OPENGL_LIBRARY GLESv1_CM EGL)
      else()
         set(GRAPHICS_OPENGL_LIBRARY ${OPENGL_gl_LIBRARY};${OPENGL_glu_LIBRARY};${GLUT_glut_LIBRARY})
      endif(USE_OPENGLES2)
      if (HAVE_FREEIMAGE)
         list(APPEND GRAPHICS_OPENGL_LIBRARY freeimage)
      endif(HAVE_FREEIMAGE)
      set_with_reason(graphics/opengl "Found OpenGL" TRUE ${GRAPHICS_OPENGL_LIBRARY})
   else()
      message (STATUS "opengl not found")
   endif()
else()
   message (STATUS "no Freetype found")
endif(FREETYPE_FOUND)

if(SDL_FOUND AND SDLIMAGE_FOUND AND FREETYPE_FOUND)
   set(SDL_IMAGE 1)
   if(SDLTTF_FOUND)
      set(SDL_TTF 1)
      list(APPEND SDL_LIBRARY ${SDLTTF_LIBRARY})
   else(SDLTTF_FOUND)
      list(APPEND SDL_LIBRARY ${FREETYPE_LIBRARY})
   endif(SDLTTF_FOUND)
   set_with_reason(graphics/sdl "SDL/SDL_image libs found" TRUE ${SDL_LIBRARY} ${SDLIMAGE_LIBRARY})
endif(SDL_FOUND AND SDLIMAGE_FOUND AND FREETYPE_FOUND)

if(SDL2MAIN AND SDL2IMAGE AND GLES2)
    set_with_reason(graphics/egl "SDL2/SDL2_image libs found" TRUE ${SDL2MAIN} ${SDL2IMAGE} ${GLES2})
    message(STATUS "EGL libs found : ${SDL2MAIN} ${SDL2IMAGE} ${GLES2}")
endif(SDL2MAIN AND SDL2IMAGE AND GLES2)

if (LIBGPS_FOUND)
   if (LIBGPS_NEW_FOUND)
      set(VEHICLE_GPSD_REASON "gpsd lib found")
   else(LIBGPS_NEW_FOUND)
     set(VEHICLE_GPSD_REASON "WARNING: old gpsd lib found, buggy if LC_ALL is set")
   endif(LIBGPS_NEW_FOUND)
   set_with_reason(vehicle/gpsd ${VEHICLE_GPSD_REASON} TRUE ${LIBGPS_LDFLAGS})
endif(LIBGPS_FOUND)

if (GYPSY_FOUND)
   set_with_reason(vehicle/gypsy "gypsy lib found" TRUE)
endif(GYPSY_FOUND)

if (LIBGARMIN_FOUND)
   include_directories(${LIBGARMIN_INCLUDE_DIRS})
   set_with_reason(map/garmin "Garmin library found" TRUE ${LIBGARMIN_LDFLAGS})
endif(LIBGARMIN_FOUND)

if(DBusGLib_FOUND)
   include_directories(${DBusGLib_INCLUDE_DIRS})
   set_with_reason(binding/dbus "dbus-glib-1 found" TRUE ${DBusGLib_LIBRARIES})
   set_with_reason(vehicle/gpsd_dbus "dbus-glib-1 found" TRUE ${DBusGLib_LIBRARIES})
endif()

if(PYTHONLIBS_FOUND)
   set_with_reason(binding/python "python libraries [${PYTHONLIBS_VERSION_STRING}] found" TRUE ${PYTHON_LIBRARIES})
endif()

#Independent modules
add_module(graphics/null "Default" TRUE)
add_module(osd/core "Default" TRUE)
add_module(vehicle/demo "Default" TRUE)
add_module(vehicle/file "Default" TRUE)
add_module(vehicle/null "Default" FALSE)
add_module(gui/internal "Default" TRUE)
add_module(map/binfile "Default" TRUE)
add_module(map/filter "Default" TRUE)
add_module(map/mg "Default" TRUE)
add_module_plugin(support/shapefile "Default" TRUE)
set(map_shapefile_INCLUDES "${CMAKE_SOURCE_DIR}/navit/support/shapefile")
#set(map_shapefile_LIBRARY_DIRS "${CMAKE_BINARY_DIR}/navit/support/shapefile")
set(map_shapefile_LIBS "support_shapefile")
add_module(map/shapefile "Default" TRUE)
add_module(map/textfile "Default" TRUE)
add_module(map/csv "Default" TRUE)

#Modules without test yet
add_module(plugin/pedestrian "Default" FALSE)
add_module(plugin/j1850 "Default" FALSE)
# add_module(plugin/ssd1306 "Default" TRUE)

# other features
add_feature(USE_PLUGINS "default" TRUE)
add_feature(USE_ROUTING "default" TRUE)
add_feature(USE_SVG "default" TRUE)
add_feature(SVG2PNG "default" TRUE)
add_feature(SAMPLE_MAP "default" TRUE)
add_feature(NETWORK_INFO "default" FALSE)

IF(NOT svg2png_scaling)
   set(svg2png_scaling 0 16 32 48 64 96)
ENDIF()
IF(NOT svg2png_scaling_flag)
   set(svg2png_scaling_flag 32)
ENDIF()
IF(NOT svg2png_scaling_nav)
   set(svg2png_scaling_nav 64)
ENDIF()

add_feature(DBUS_USE_SYSTEM_BUS "default" FALSE)
add_feature(BUILD_MAPTOOL "default" TRUE)
add_feature(XSL_PROCESSING "default" TRUE)

set(SUPPORTED_XSLT_PROCESSORS "saxonb-xslt;saxon;saxon8;saxon-xslt;xsltproc;transform.exe")
find_program(XSLT_PROCESSOR NAMES ${SUPPORTED_XSLT_PROCESSORS})
if(XSLT_PROCESSOR)
   message(STATUS "Found XSLT processor: ${XSLT_PROCESSOR}")
   execute_process(COMMAND ${XSLT_PROCESSOR} -snone ${CMAKE_CURRENT_SOURCE_DIR}/cmake/test.xml ${CMAKE_CURRENT_SOURCE_DIR}/cmake/test.xslt
      RESULT_VARIABLE SAXON_ERROR OUTPUT_QUIET ERROR_QUIET)
   if (NOT SAXON_ERROR)
      set (XSLT_PROCESSOR_OPTIONS -snone)
   endif()
   # additional parameter is passed to the stylesheet processor as transformation parameter
   macro(compose_xslt_transform_command CMDVAR XSLT_FILE SRC_XML DEST_XML)
      if(${XSLT_PROCESSOR} MATCHES "xsltproc")
         set(${CMDVAR} COMMAND ${XSLT_PROCESSOR} ${XSLT_PROCESSOR_OPTIONS} ${XSLT_FILE} ${SRC_XML} >${DEST_XML})
      else()
         set(${CMDVAR} COMMAND ${XSLT_PROCESSOR} ${XSLT_PROCESSOR_OPTIONS} ${SRC_XML} ${XSLT_FILE} ${ARGN} >${DEST_XML})
      endif()
   endmacro()
else()
   cfg_feature(XSL_PROCESSING "Saxon missing" FALSE)
endif(XSLT_PROCESSOR)

if (NOT XSL_PROCESSING)
   message(WARNING "No XSLT processor available. You have to configure "
"navit.xml yourself, or install an XSLT processor (supported: "
"${SUPPORTED_XSLT_PROCESSORS}).")
endif()

### Platform specific settings
if(NOT CACHE_SIZE)
   SET(CACHE_SIZE 1048576)
endif(NOT CACHE_SIZE)

if(CMAKE_SIZEOF_VOID_P LESS 8)
   set_with_reason(BUILD_MAPTOOL "maptool works only on 64 bit architectures" FALSE)
endif()

set(LOCALEDIR "${LOCALE_DIR}")

find_program(BZCAT NAMES bzcat)
if (SAMPLE_MAP)
   if(CMAKE_CROSSCOMPILING)
      cfg_feature(SAMPLE_MAP "downloading binary map because of cross compiling" TRUE)
      set(DOWNLOAD_SAMPLE_MAP TRUE)
   elseif(NOT BZCAT)
      cfg_feature(SAMPLE_MAP "downloading binary map because of missing bzcat" TRUE)
      set(DOWNLOAD_SAMPLE_MAP TRUE)
   elseif(NOT BUILD_MAPTOOL)
      cfg_feature(SAMPLE_MAP "downloading binary map because maptool compilation is disabled" TRUE)
      set(DOWNLOAD_SAMPLE_MAP TRUE)
   endif(CMAKE_CROSSCOMPILING)
endif(SAMPLE_MAP)

check_symbol_exists (getifaddrs "sys/types.h;ifaddrs.h" HAS_IFADDRS)
if (HAS_IFADDRS)
    cfg_feature(NETWORK_INFO "ifaddrs.h found" TRUE)
endif(HAS_IFADDRS)

if(FREETYPE_FOUND AND NOT FONTCONFIG_FOUND)
   add_subdirectory( "${CMAKE_CURRENT_SOURCE_DIR}/navit/fonts")
endif()

# Image conversion
find_program(IMAGE_CONVERTER NAMES convert)
execute_process(COMMAND ${IMAGE_CONVERTER} -list format OUTPUT_VARIABLE CONVERT_FORMATS)
if(CONVERT_FORMATS MATCHES ".*XPM[ *][ ]*XPM[ ]*r[w-].*")
   set(IMAGE_CONVERTER_XPM ${IMAGE_CONVERTER})
endif()

set(CMAKE_APPBUNDLE_PATH "")
if (SVG2PNG)
   if (NOT IMAGE_CONVERTER_SVGZ)
      set (SVG_CONVERTER_PROGS rsvg-convert ksvgtopng ksvgtopng4 inkscape)
      set (CMAKE_FIND_APPBUNDLE "NEVER")
      find_program(IMAGE_CONVERTER_SVGZ NAMES ${SVG_CONVERTER_PROGS} PATHS /Applications/Inkscape.app/Contents/Resources/bin)
      if (NOT IMAGE_CONVERTER_SVGZ)
         if(CONVERT_FORMATS MATCHES ".*[ ]*SVG[ ]*r[w-].*")
            set(IMAGE_CONVERTER_SVGZ ${IMAGE_CONVERTER})
         endif()
      endif()
   endif(NOT IMAGE_CONVERTER_SVGZ)
   if (NOT IMAGE_CONVERTER_SVG)
      set(IMAGE_CONVERTER_SVG ${IMAGE_CONVERTER_SVGZ})
   endif(NOT IMAGE_CONVERTER_SVG)

   message(STATUS "SVG2PNG-Converter: ${IMAGE_CONVERTER_SVGZ}")
   if (NOT IMAGE_CONVERTER_SVGZ)
      message(WARNING "No SVG2PNG converter found. Please install one of the following tools: ${SVG_CONVERTER_PROGS}, or imagemagick with svg support")
      set_with_reason(SVG2PNG "no converter found" FALSE)
   endif(NOT IMAGE_CONVERTER_SVGZ)
endif(SVG2PNG)

if (XPM2PNG)
   message(STATUS "XPM2PNG-Converter: ${IMAGE_CONVERTER_XPM}")
   if (NOT IMAGE_CONVERTER_XPM)
      message(WARNING "No XPM2PNG converter found. Please install imagemagick with xpm support")
      set_with_reason(XPM2PNG "no converter found" FALSE)
   endif(NOT IMAGE_CONVERTER_XPM)
endif(XPM2PNG)

set(XSLTS ${XSLTS} CACHE STRING "define a semicolon seperated list of XSLTs to process")

# Plugins
if(USE_PLUGINS)
   set(MODULE_BUILD_TYPE "MODULE")
   add_definitions("-fPIC")
   list(APPEND NAVIT_LIBS dl)
else()
   set(MODULE_BUILD_TYPE "STATIC")
endif(USE_PLUGINS)
message(STATUS "Use plugins: ${MODULE_BUILD_TYPE}")

CHECK_INCLUDE_FILES (unistd.h HAVE_UNISTD_H)
CHECK_FUNCTION_EXISTS (popen HAVE_POPEN)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)

# Compile with -Wall -Wextra. We need all the help we can get from the compiler :-).
# Disabled warnings:
# -Wno-missing-field-initializers: Used a lot, does not seem problematic.
# -Wno-unused-parameter: Unfortunately occurs frequently because of
#                        functions implementing the interface of a plugin.
# -Wno-sign-compare: We currently just use int almost everywhere.
#                    Unclear if it's really worth correcting.
if(CMAKE_COMPILER_IS_GNUCC OR CCMAKE_COMPILER_IS_GNUCXX)
   set(COMMON_COMPILER_FLAGS "-Wall -Wundef -Wcast-align -Wpointer-arith -Wno-unused-parameter -Wno-sign-compare")
   set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} ${COMMON_COMPILER_FLAGS}")
   set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} ${COMMON_COMPILER_FLAGS}")
   # flags not available in old GCC versions, or not for both C and C++
   add_compiler_flag_if_available("-Wno-missing-field-initializers")
   add_compiler_flag_if_available("-Wextra")
   add_compiler_flag_if_available("-Wmissing-prototypes")
   add_compiler_flag_if_available("-Wstrict-prototypes ")
endif()

if (EXTRA_DEFINES)
	add_definitions("${EXTRA_DEFINES}")
endif(EXTRA_DEFINES)

if (NOT NAVIT_DEPENDENCY_ERROR)
   message("\nSummary:\n")

   set(SUMMARY_COMPONENTS ${ALL_PLUGINS} ${ALL_MODULE_PLUGINS} ${ALL_MODULES})
   list(SORT SUMMARY_COMPONENTS)

   set(LAST_TYPE NONE)
   foreach ( SUMMARY_COMP ${SUMMARY_COMPONENTS})
      # split path to type and name
      string(REPLACE "/" ";" SUMMARY_COMP_LIST ${SUMMARY_COMP})
      list(GET SUMMARY_COMP_LIST 0 SUMMARY_COMP_TYPE)
      list(LENGTH SUMMARY_COMP_LIST SUMMARY_COMP_LIST_LENGTH)
      if ( SUMMARY_COMP_LIST_LENGTH GREATER 1 )
         list(GET SUMMARY_COMP_LIST 1 SUMMARY_COMP_NAME)
      else()
         set(SUMMARY_COMP_NAME ${SUMMARY_COMP})
      endif()
      if ( NOT ${LAST_TYPE} STREQUAL ${SUMMARY_COMP_TYPE})
         message("\n--->>> ${SUMMARY_COMP_TYPE}")
         set(LAST_TYPE ${SUMMARY_COMP_TYPE})
      endif()
      if (${SUMMARY_COMP})
         message("Enabled   ${SUMMARY_COMP_NAME} ( ${${SUMMARY_COMP}_REASON} )")
      else()
         message("Disabled  ${SUMMARY_COMP_NAME} ( ${${SUMMARY_COMP}_REASON} )")
      endif()
   endforeach()

   list(SORT ALL_FEATURES)
   message("\n--->>> Features")
   foreach ( FEATURE ${ALL_FEATURES})
      if ( ${FEATURE} )
         message("Enabled   ${FEATURE} ( ${${FEATURE}_REASON} )")
      else()
         message("Disabled  ${FEATURE} ( ${${FEATURE}_REASON} )")
      endif()
   endforeach()

   if (XSL_PROCESSING)
      if (XSLTS)
         message("\nProcessing XSLT files: ${XSLTS}")
      else()
         message("\nProcessing XSLT files: NONE")
      endif(XSLTS)
      message("See navit/xslt for available XSLT files, and put them into "
	      "cache variable 'XSLTS' (without extension .xslt).")
   endif(XSL_PROCESSING)

   message("\nTo configure your build use 'cmake -L' to find changeable variables and run cmake again with 'cmake -D <var-name>=<your value> ...'.")
endif(NOT NAVIT_DEPENDENCY_ERROR)

add_subdirectory (navit)
